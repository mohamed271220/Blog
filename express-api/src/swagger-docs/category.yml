openapi: 3.0.0
info:
  title: Category API
  description: API for managing categories
  version: 1.0.0

servers:
  - url: http://localhost:3000

paths:
  /api/v1/categories:
    post:
      summary: Add a new category
      description: Create a new category. Only accessible by superadmin and admin roles.
      tags:
        - Categories
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Electronics
                  description: The name of the category
              required:
                - name
      responses:
        201:
          description: Category created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: category created successfully
                  category:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 123e4567-e89b-12d3-a456-426614174000
                      name:
                        type: string
                        example: Electronics
        400:
          description: Bad request (name is required)
        401:
          description: Unauthorized
        403:
          description: Forbidden

    get:
      summary: Get all categories
      description: Retrieve a list of all categories.
      tags:
        - Categories
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
            description: The number of categories to return
        - in: query
          name: offset
          schema:
            type: integer
            example: 0
            description: The number of categories to skip
      responses:
        200:
          description: Fetched categories successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: fetched categories successfully
                  categories:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: 123e4567-e89b-12d3-a456-426614174000
                        name:
                          type: string
                          example: Electronics
                        Pagination:
                          type: object
                          properties:
                            totalItems:
                              type: integer
                              description: The total number of views available.
                            itemsPerPage:
                              type: integer
                              description: The number of views returned per page.
                            currentPage:
                              type: integer
                              description: The current page number.
                            totalPages:
                              type: integer
                              description: The total number of pages.
                            hasNextPage:
                              type: boolean
                              description: Indicates if there is a next page.
                            hasPreviousPage:
                              type: boolean
                              description: Indicates if there is a previous page.
                            nextPage:
                              type: integer
                              nullable: true
                              description: The page number of the next page, or null if there is none.
                            previousPage:
                              type: integer
                              nullable: true
                              description: The page number of the previous page, or null if there is none.


  /api/v1/categories/{categoryId}:
    get:
      summary: Get a category by ID
      description: Retrieve details of a specific category by its ID.
      tags:
        - Categories
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: string
            example: 123e4567-e89b-12d3-a456-426614174000
            description: The ID of the category
      responses:
        200:
          description: Fetched category successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: fetched category successfully
                  category:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 123e4567-e89b-12d3-a456-426614174000
                      name:
                        type: string
                        example: Electronics
        404:
          description: Category not found

    put:
      summary: Update a category by ID
      description: Update the name of a specific category by its ID. Only accessible by superadmin and admin roles.
      tags:
        - Categories
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: string
            example: 123e4567-e89b-12d3-a456-426614174000
            description: The ID of the category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Electronics
                  description: The new name of the category
              required:
                - name
      responses:
        200:
          description: Category updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: category updated successfully
        400:
          description: Bad request (name is required)
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Category not found

    delete:
      summary: Delete a category by ID
      description: Delete a specific category by its ID. Only accessible by superadmin role.
      tags:
        - Categories
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: string
            example: 123e4567-e89b-12d3-a456-426614174000
            description: The ID of the category
      responses:
        200:
          description: Category deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: category deleted successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Category not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
